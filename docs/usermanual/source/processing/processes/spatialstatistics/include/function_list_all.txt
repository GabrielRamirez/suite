DefaultFunctionFactory
^^^^^^^^^^^^^^^^^^^^^^

Contains 195 functions.

Area(geometry): area
''''''''''''''''''''

* geometry: Geometry 1:1 required

* area: Double 1:1 required

Categorize(LookupValue, Value, Threshold 1, Value 1, Threshold 2, Value 2, succeeding or preceding): return
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* LookupValue

* Value

* Threshold 1

* Value 1

* Threshold 2

* Value 2

* succeeding or preceding

* return

Collection_Average(expression): average
'''''''''''''''''''''''''''''''''''''''

* expression: Number 1:1 required

* average: Number 1:1 required

Collection_Bounds(geometry): bounds
'''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* bounds

Collection_Count(features): count
'''''''''''''''''''''''''''''''''

* features

* count: Number 1:1 required

Collection_Max(expression): max
'''''''''''''''''''''''''''''''

* expression: Comparable 1:1 required

* max: Comparable 1:1 required

Collection_Median(expression): median
'''''''''''''''''''''''''''''''''''''

* expression: Comparable 1:1 required

* median: Comparable 1:1 required

Collection_Min(expression): min
'''''''''''''''''''''''''''''''

* expression: Comparable 1:1 required

* min: Comparable 1:1 required

Collection_Nearest(value): expression
'''''''''''''''''''''''''''''''''''''

* value: Comparable 1:1 required

* expression: Expression 1:1 required

Collection_Sum(expression): sum
'''''''''''''''''''''''''''''''

* expression: Number 1:1 required

* sum: Number 1:1 required

Collection_Unique(expression): unique
'''''''''''''''''''''''''''''''''''''

* expression

* unique

Concatenate(text): result
'''''''''''''''''''''''''

* text: String 2:-1 required

* result: String 1:1 required

EqualArea(value, classes, areaFunction): EqualArea
''''''''''''''''''''''''''''''''''''''''''''''''''

* value: Double 1:1 required

* classes: Integer 1:1 required

* areaFunction: Double 0:1 optional

* EqualArea: RangedClassifier 1:1 required

EqualInterval(value, classes): EqualInterval
''''''''''''''''''''''''''''''''''''''''''''

* value: Double 1:1 required

* classes: Integer 1:1 required

* EqualInterval: RangedClassifier 1:1 required

IEEEremainder(dividend, divisor): remainder
'''''''''''''''''''''''''''''''''''''''''''

* dividend: Number 1:1 required

* divisor: Number 1:1 required

* remainder: Double 1:1 required

Interpolate(data value pairs, mode, method): lookup
'''''''''''''''''''''''''''''''''''''''''''''''''''

* data value pairs

* mode: String 1:1 required

* method: String 0:1 optional

* lookup

Jenks(value, classes): Jenks
''''''''''''''''''''''''''''

* value: Double 1:1 required

* classes: Integer 1:1 required

* Jenks: RangedClassifier 1:1 required

PropertyExists(propertyName): exists
''''''''''''''''''''''''''''''''''''

* propertyName

* exists: Boolean 1:1 required

Quantile(value, classes): Quantile
''''''''''''''''''''''''''''''''''

* value: Double 1:1 required

* classes: Integer 1:1 required

* Quantile: RangedClassifier 1:1 required

Recode(LookupValue, Data 1, Value 1, Data 2, Value 2): return
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* LookupValue

* Data 1

* Value 1

* Data 2

* Value 2

* return

StandardDeviation(value, classes): StandardDeviation
''''''''''''''''''''''''''''''''''''''''''''''''''''

* value: Double 1:1 required

* classes: Integer 1:1 required

* StandardDeviation: RangedClassifier 1:1 required

UniqueInterval(value, classes): UniqueInterval
''''''''''''''''''''''''''''''''''''''''''''''

* value: Double 1:1 required

* classes: Integer 1:1 required

* UniqueInterval: RangedClassifier 1:1 required

abs(int): abs
'''''''''''''

* int: Integer 1:1 required

* abs: Integer 1:1 required

abs_2(number): long
'''''''''''''''''''

* number: Long 1:1 required

* long: Long 1:1 required

abs_3(number): float
''''''''''''''''''''

* number: Float 1:1 required

* float: Float 1:1 required

abs_4(number): double
'''''''''''''''''''''

* number: Double 1:1 required

* double: Double 1:1 required

acos(value): arc cosine
'''''''''''''''''''''''

* value: Double 1:1 required

* arc cosine: Double 1:1 required

area2(geometry): area
'''''''''''''''''''''

* geometry: Geometry 1:1 required

* area: Double 1:1 required

asin(value): arc sine
'''''''''''''''''''''

* value: Double 1:1 required

* arc sine: Double 1:1 required

atan(value): arc tan
''''''''''''''''''''

* value: Double 1:1 required

* arc tan: Double 1:1 required

atan2(x, y): arc tan
''''''''''''''''''''

* x: Double 1:1 required

* y: Double 1:1 required

* arc tan: Double 1:1 required

attributeCount(count): return
'''''''''''''''''''''''''''''

* count

* return

between(value, min, max): between
'''''''''''''''''''''''''''''''''

* value

* min

* max

* between: Boolean 1:1 required

boundary(geometry): boundary
''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* boundary: Geometry 1:1 required

boundaryDimension(geometry): dimension
''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* dimension: Integer 1:1 required

boundedBy(): result
'''''''''''''''''''

* result: Geometry 1:1 required

buffer(geometry, distance): buffer
''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* distance: Number 1:1 required

* buffer: Geometry 1:1 required

bufferWithSegments(geometry, distance, numberOfSegments): buffer
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* distance: Number 1:1 required

* numberOfSegments: Number 1:1 required

* buffer: Geometry 1:1 required

ceil(number): ceiling
'''''''''''''''''''''

* number: Number 1:1 required

* ceiling: Double 1:1 required

centroid(geometry): centroid
''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* centroid: Point 1:1 required

classify(expression, classifer): value
''''''''''''''''''''''''''''''''''''''

* expression

* classifer: Classifier 1:1 required

* value

contains(geometry1, geometry2): contains
''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* contains: Boolean 1:1 required

contrast(reference, color1, color2, threshold): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''

* reference: Color 1:1 required

* color1: Color 0:1 optional

* color2: Color 0:1 optional

* threshold: Double 0:1 optional

* result: Color 1:1 required

convert(value, class): converted
''''''''''''''''''''''''''''''''

* value

* class: Class 1:1 required

* converted

convexHull(geometry): hull
''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* hull: Geometry 1:1 required

cos(radians): cosine
''''''''''''''''''''

* radians: Double 1:1 required

* cosine: Double 1:1 required

crosses(geometry1, geometry2): crosses
''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* crosses: Boolean 1:1 required

darken(color, amount, method): result
'''''''''''''''''''''''''''''''''''''

* color: Color 1:1 required

* amount: Float 1:1 required

* method: Method 0:1 optional

* result: Color 1:1 required

dateDifference(a, b): result
''''''''''''''''''''''''''''

* a: Date 1:1 required

* b: Date 1:1 required

* result: Long 1:1 required

dateFormat(format, date): formatted
'''''''''''''''''''''''''''''''''''

* format: String 1:1 required

* date: Date 1:1 required

* formatted: String 1:1 required

dateParse(format, dateString): date
'''''''''''''''''''''''''''''''''''

* format: String 1:1 required

* dateString: String 1:1 required

* date: Date 1:1 required

desaturate(color, amount, method): result
'''''''''''''''''''''''''''''''''''''''''

* color: Color 1:1 required

* amount: Float 1:1 required

* method: Method 0:1 optional

* result: Color 1:1 required

difference(geometry1, geometry2): difference
''''''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* difference: Geometry 1:1 required

dimension(geometry): dimension
''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* dimension: Integer 1:1 required

disjoint(geometry1, geometry2): disjoint
''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* disjoint: Boolean 1:1 required

disjoint3D(geometry1, geometry2): disjoint3D
''''''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* disjoint3D: Double 1:1 required

distance(geometry1, geometry2): distance
''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* distance: Double 1:1 required

distance3D(geometry1, geometry2): distance3D
''''''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* distance3D: Double 1:1 required

double2bool(double): double2bool
''''''''''''''''''''''''''''''''

* double: Double 1:1 required

* double2bool: Boolean 1:1 required

endAngle(linestring): endAngle
''''''''''''''''''''''''''''''

* linestring: LineString 1:1 required

* endAngle: Double 1:1 required

endPoint(linestring): endPoint
''''''''''''''''''''''''''''''

* linestring: LineString 1:1 required

* endPoint: Point 1:1 required

env(variable): value
''''''''''''''''''''

* variable: String 1:1 required

* value

envelope(geometry): envelope
''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* envelope: Geometry 1:1 required

equalTo(a, b): equalTo
''''''''''''''''''''''

* a

* b

* equalTo: Boolean 1:1 required

equalsExact(geometry1, geometry2): equalsExact
''''''''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* equalsExact: Boolean 1:1 required

equalsExactTolerance(geometry1, geometry2, tolarance): equalsExactTolerance
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* tolarance: Double 1:1 required

* equalsExactTolerance: Boolean 1:1 required

exp(number): exponent
'''''''''''''''''''''

* number: Number 1:1 required

* exponent: Double 1:1 required

exteriorRing(geometry): exteriorRing
''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* exteriorRing: LinearRing 1:1 required

floor(double): floor
''''''''''''''''''''

* double: Double 1:1 required

* floor: Double 1:1 required

geomFromWKT(geometry): geomFromWKT
''''''''''''''''''''''''''''''''''

* geometry: String 1:1 required

* geomFromWKT: Geometry 1:1 required

geomLength(geometry): geomLength
''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* geomLength: Double 1:1 required

geometry(): geometry
''''''''''''''''''''

* geometry: Boolean 1:1 required

geometryType(geometry): geometryType
''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* geometryType: String 1:1 required

getGeometryN(geometry, index): getGeometryN
'''''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* index: Integer 1:1 required

* getGeometryN: Geometry 1:1 required

getX(geometry): getX
''''''''''''''''''''

* geometry: Geometry 1:1 required

* getX: Double 1:1 required

getY(geometry): getY
''''''''''''''''''''

* geometry: Geometry 1:1 required

* getY: Double 1:1 required

getz(geometry): getz
''''''''''''''''''''

* geometry: Geometry 1:1 required

* getz: Double 1:1 required

grayscale(color): result
''''''''''''''''''''''''

* color: Color 1:1 required

* result: Color 1:1 required

greaterEqualThan(x, y): greaterEqualThan
''''''''''''''''''''''''''''''''''''''''

* x

* y

* greaterEqualThan: Boolean 1:1 required

greaterThan(x, y): greaterThan
''''''''''''''''''''''''''''''

* x

* y

* greaterThan: Boolean 1:1 required

hsl(hue, saturation, lightness): result
'''''''''''''''''''''''''''''''''''''''

* hue: Double 1:1 required

* saturation: Double 1:1 required

* lightness: Double 1:1 required

* result: Color 1:1 required

id(): id
''''''''

* id: String 1:1 required

if_then_else(condition, then, else): if_then_else
'''''''''''''''''''''''''''''''''''''''''''''''''

* condition: Boolean 1:1 required

* then

* else

* if_then_else

in(candidate, v): result
''''''''''''''''''''''''

* candidate

* v

* result: Boolean 1:1 required

in10(value, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10): in10
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* value

* in1

* in2

* in3

* in4

* in5

* in6

* in7

* in8

* in9

* in10

* in10: Boolean 1:1 required

in2(value, in1, in2): in2
'''''''''''''''''''''''''

* value

* in1

* in2

* in2: Boolean 1:1 required

in3(value, in1, in2, in3): in3
''''''''''''''''''''''''''''''

* value

* in1

* in2

* in3

* in3: Boolean 1:1 required

in4(value, in1, in2, in3, in4): in4
'''''''''''''''''''''''''''''''''''

* value

* in1

* in2

* in3

* in4

* in4: Boolean 1:1 required

in5(value, in1, in2, in3, in4, in5): in5
''''''''''''''''''''''''''''''''''''''''

* value

* in1

* in2

* in3

* in4

* in5

* in5: Boolean 1:1 required

in6(value, in1, in2, in3, in4, in5, in6): in6
'''''''''''''''''''''''''''''''''''''''''''''

* value

* in1

* in2

* in3

* in4

* in5

* in6

* in6: Boolean 1:1 required

in7(value, in1, in2, in3, in4, in5, in6, in7): in7
''''''''''''''''''''''''''''''''''''''''''''''''''

* value

* in1

* in2

* in3

* in4

* in5

* in6

* in7

* in7: Boolean 1:1 required

in8(value, in1, in2, in3, in4, in5, in6, in7, in8): in8
'''''''''''''''''''''''''''''''''''''''''''''''''''''''

* value

* in1

* in2

* in3

* in4

* in5

* in6

* in7

* in8

* in8: Boolean 1:1 required

in9(value, in1, in2, in3, in4, in5, in6, in7, in8, in9): in9
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* value

* in1

* in2

* in3

* in4

* in5

* in6

* in7

* in8

* in9

* in9: Boolean 1:1 required

int2bbool(int): int2bbool
'''''''''''''''''''''''''

* int: Integer 1:1 required

* int2bbool: Boolean 1:1 required

int2ddouble(int): int2ddouble
'''''''''''''''''''''''''''''

* int: Integer 1:1 required

* int2ddouble: Double 1:1 required

interiorPoint(geometry): interiorPoint
''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* interiorPoint: Point 1:1 required

interiorRingN(geometry, n): interiorRingN
'''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* n: Integer 1:1 required

* interiorRingN: LinearRing 1:1 required

intersection(geometry1, geometry2): intersection
''''''''''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* intersection: Geometry 1:1 required

intersects(geometry1, geometry2): intersects
''''''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* intersects: Boolean 1:1 required

intersects3D(geometry1, geometry2): intersects3D
''''''''''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* intersects3D: Double 1:1 required

isClosed(geometry): isClosed
''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* isClosed: Boolean 1:1 required

isCoverage(): isCoverage
''''''''''''''''''''''''

* isCoverage: Boolean 1:1 required

isEmpty(geometry): isEmpty
''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* isEmpty: Boolean 1:1 required

isLike(string, regex): isLike
'''''''''''''''''''''''''''''

* string: String 1:1 required

* regex: String 1:1 required

* isLike: Boolean 1:1 required

isNull(object): isNull
''''''''''''''''''''''

* object

* isNull: Boolean 1:1 required

isRing(geometry): isRing
''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* isRing: Boolean 1:1 required

isSimple(geometry): isSimple
''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* isSimple: Boolean 1:1 required

isValid(geometry): isValid
''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* isValid: Boolean 1:1 required

isWithinDistance(geometry1, geometry2, distance): isWithinDistance
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* distance: Double 1:1 required

* isWithinDistance: Boolean 1:1 required

isWithinDistance3D(geometry1, geometry2, distance): isWithinDistance3D
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* distance: Double 1:1 required

* isWithinDistance3D: Double 1:1 required

isometric(geometry, extrusion): isometric
'''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* extrusion: Double 1:1 required

* isometric: Geometry 1:1 required

length(string): length
''''''''''''''''''''''

* string: String 1:1 required

* length: Integer 1:1 required

lessEqualThan(a, b): lessEqualThan
''''''''''''''''''''''''''''''''''

* a: Number 1:1 required

* b: Number 1:1 required

* lessEqualThan: Boolean 1:1 required

lessThan(a, b): lessThan
''''''''''''''''''''''''

* a: Number 1:1 required

* b: Number 1:1 required

* lessThan: Boolean 1:1 required

lighten(color, amount, method): result
''''''''''''''''''''''''''''''''''''''

* color: Color 1:1 required

* amount: Float 1:1 required

* method: Method 0:1 optional

* result: Color 1:1 required

list(item): list
''''''''''''''''

* item

* list: List 1:1 required

listMultiply(factor, list): listMultiply
''''''''''''''''''''''''''''''''''''''''

* factor: Number 1:1 required

* list: String 1:1 required

* listMultiply: String 1:1 required

log(value): logarithm
'''''''''''''''''''''

* value: Number 1:1 required

* logarithm: Double 1:1 required

max(double, double): maxium
'''''''''''''''''''''''''''

* double: Number 1:1 required

* double: Number 1:1 required

* maxium: Double 1:1 required

max_2(long, long): maximum
''''''''''''''''''''''''''

* long: Number 1:1 required

* long: Number 1:1 required

* maximum: Long 1:1 required

max_3(float, float): maximum
''''''''''''''''''''''''''''

* float: Number 1:1 required

* float: Number 1:1 required

* maximum: Float 1:1 required

max_4(int, int): maximum
''''''''''''''''''''''''

* int: Number 1:1 required

* int: Number 1:1 required

* maximum: Integer 1:1 required

min(double, double): minium
'''''''''''''''''''''''''''

* double: Double 1:1 required

* double: Double 1:1 required

* minium: Double 1:1 required

min_2(long, long): minium
'''''''''''''''''''''''''

* long: Number 1:1 required

* long: Number 1:1 required

* minium: Long 1:1 required

min_3(float, float): minium
'''''''''''''''''''''''''''

* float: Number 1:1 required

* float: Number 1:1 required

* minium: Float 1:1 required

min_4(int, int): minium
'''''''''''''''''''''''

* int: Number 1:1 required

* int: Number 1:1 required

* minium: Integer 1:1 required

mincircle(geometry): mincircle
''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* mincircle: Geometry 1:1 required

minimumdiameter(geometry): minimumdiameter
''''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* minimumdiameter: Geometry 1:1 required

minrectangle(geometry): minrectangle
''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* minrectangle: Geometry 1:1 required

mix(color1, color2, weight): result
'''''''''''''''''''''''''''''''''''

* color1: Color 1:1 required

* color2: Color 1:1 required

* weight: Double 1:1 required

* result: Color 1:1 required

modulo(dividend, divisor): modulo
'''''''''''''''''''''''''''''''''

* dividend: Integer 1:1 required

* divisor: Integer 1:1 required

* modulo: Integer 1:1 required

not(logicValue): not
''''''''''''''''''''

* logicValue: Boolean 1:1 required

* not: Boolean 1:1 required

notEqualTo(a, b): notEqualTo
''''''''''''''''''''''''''''

* a

* b

* notEqualTo: Boolean 1:1 required

numGeometries(geometry): numGeometries
''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* numGeometries: Integer 1:1 required

numInteriorRing(geometry): numInteriorRing
''''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* numInteriorRing: Integer 1:1 required

numPoints(geometry): numPoints
''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* numPoints: Integer 1:1 required

numberFormat(format, number, language): numberFormat
''''''''''''''''''''''''''''''''''''''''''''''''''''

* format: String 1:1 required

* number: Number 1:1 required

* language: String 0:1 optional

* numberFormat: String 1:1 required

numberFormat2(format, number, minus, decimal, separator): numberFormat2
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* format: String 1:1 required

* number: Number 1:1 required

* minus: String 1:1 required

* decimal: String 1:1 required

* separator: String 1:1 required

* numberFormat2: String 1:1 required

octagonalenvelope(geometry): octagonalenvelope
''''''''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* octagonalenvelope: Geometry 1:1 required

offset(geometry, offsetX, offsetY): offset
''''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* offsetX: Double 1:1 required

* offsetY: Double 1:1 required

* offset: Geometry 1:1 required

overlaps(geometry1, geometry2): overlaps
''''''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* overlaps: Geometry 1:1 required

parseBoolean(string): parseBoolean
''''''''''''''''''''''''''''''''''

* string: String 1:1 required

* parseBoolean: Boolean 1:1 required

parseDouble(string): parseDouble
''''''''''''''''''''''''''''''''

* string: String 1:1 required

* parseDouble: Double 1:1 required

parseInt(string): parseInt
''''''''''''''''''''''''''

* string: String 1:1 required

* parseInt: Integer 1:1 required

parseLong(string): parseLong
''''''''''''''''''''''''''''

* string: String 1:1 required

* parseLong: Long 1:1 required

pgNearest(geometry, num_features): pgNearest
''''''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* num_features: Integer 1:1 required

* pgNearest: Boolean 1:1 required

pi(): pi
''''''''

* pi: Double 1:1 required

pointN(geometry, index): pointN
'''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* index: Integer 1:1 required

* pointN: Geometry 1:1 required

pow(base, exponent): power
''''''''''''''''''''''''''

* base: Number 1:1 required

* exponent: Number 1:1 required

* power: Double 1:1 required

property(propertyName): propertyValue
'''''''''''''''''''''''''''''''''''''

* propertyName: String 1:1 required

* propertyValue

random(): random
''''''''''''''''

* random: Double 1:1 required

relate(geometry1, geometry2): relate
''''''''''''''''''''''''''''''''''''

* geometry1: Geometry 1:1 required

* geometry2: Geometry 1:1 required

* relate: String 1:1 required

relatePattern(geometry, geometry, pattern): related
'''''''''''''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* geometry: Geometry 1:1 required

* pattern: String 1:1 required

* related: Boolean 1:1 required

rescaleToPixels(value, defaultUnit, scaleFactor, rescalingMode): rescaleToPixels
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* value: String 1:1 required

* defaultUnit: Unit 1:1 required

* scaleFactor: Double 1:1 required

* rescalingMode: RescalingMode 0:1 optional

* rescaleToPixels: String 1:1 required

rint(double): rounded
'''''''''''''''''''''

* double: Number 1:1 required

* rounded: Double 1:1 required

round(number): float
''''''''''''''''''''

* number: Number 1:1 required

* float: Float 1:1 required

roundDouble(number): rounded
''''''''''''''''''''''''''''

* number: Number 1:1 required

* rounded: Double 1:1 required

round_2(number): long
'''''''''''''''''''''

* number: Number 1:1 required

* long: Long 1:1 required

saturate(color, amount, method): result
'''''''''''''''''''''''''''''''''''''''

* color: Color 1:1 required

* amount: Float 1:1 required

* method: Method 0:1 optional

* result: Color 1:1 required

setCRS(geometry, CRS): setCRS
'''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* CRS: String 1:1 required

* setCRS: Geometry 1:1 required

shade(color, weight): result
''''''''''''''''''''''''''''

* color: Color 1:1 required

* weight: Double 1:1 required

* result: Color 1:1 required

sin(radians): sine
''''''''''''''''''

* radians: Number 1:1 required

* sine: Double 1:1 required

spin(color, amount): result
'''''''''''''''''''''''''''

* color: Color 1:1 required

* amount: Double 1:1 required

* result: Color 1:1 required

sqrt(number): root
''''''''''''''''''

* number: Number 1:1 required

* root: Double 1:1 required

startAngle(linestring): degrees
'''''''''''''''''''''''''''''''

* linestring: LineString 1:1 required

* degrees: Double 1:1 required

startPoint(linestring): point
'''''''''''''''''''''''''''''

* linestring: LineString 1:1 required

* point: Point 1:1 required

strCapitalize(string): string
'''''''''''''''''''''''''''''

* string: String 1:1 required

* string: String 1:1 required

strConcat(string1, string2): strConcat
''''''''''''''''''''''''''''''''''''''

* string1: String 1:1 required

* string2: String 1:1 required

* strConcat: String 1:1 required

strEndsWith(String, postfix): endsWith
''''''''''''''''''''''''''''''''''''''

* String: String 1:1 required

* postfix: String 1:1 required

* endsWith: Boolean 1:1 required

strEqualsIgnoreCase(string, lookup): equals
'''''''''''''''''''''''''''''''''''''''''''

* string: String 1:1 required

* lookup: String 1:1 required

* equals: Boolean 1:1 required

strIndexOf(String, lookup): index
'''''''''''''''''''''''''''''''''

* String: String 1:1 required

* lookup: String 1:1 required

* index: Integer 1:1 required

strLastIndexOf(String, lookup): index
'''''''''''''''''''''''''''''''''''''

* String: String 1:1 required

* lookup: String 1:1 required

* index: Integer 1:1 required

strLength(string): length
'''''''''''''''''''''''''

* string: String 1:1 required

* length: Integer 1:1 required

strMatches(string, regex): match
''''''''''''''''''''''''''''''''

* string: String 1:1 required

* regex: String 1:1 required

* match: Boolean 1:1 required

strPosition(string, lookup, method): string
'''''''''''''''''''''''''''''''''''''''''''

* string: String 1:1 required

* lookup: String 1:1 required

* method: String 1:1 required

* string: String 1:1 required

strReplace(string, search, replace, all): string
''''''''''''''''''''''''''''''''''''''''''''''''

* string: String 1:1 required

* search: String 1:1 required

* replace: String 1:1 required

* all: Boolean 1:1 required

* string: String 1:1 required

strStartsWith(string, prefix): starts with
''''''''''''''''''''''''''''''''''''''''''

* string: String 1:1 required

* prefix: String 1:1 required

* starts with: Boolean 1:1 required

strSubstring(string, beginIndex, endIndex): substring
'''''''''''''''''''''''''''''''''''''''''''''''''''''

* string: String 1:1 required

* beginIndex: Integer 1:1 required

* endIndex: Integer 1:1 required

* substring: String 1:1 required

strSubstringStart(string, beginIndex): substring
''''''''''''''''''''''''''''''''''''''''''''''''

* string: String 1:1 required

* beginIndex: Integer 1:1 required

* substring: String 1:1 required

strToLowerCase(string): lowercase
'''''''''''''''''''''''''''''''''

* string: String 1:1 required

* lowercase: String 1:1 required

strToUpperCase(string): uppercase
'''''''''''''''''''''''''''''''''

* string: String 1:1 required

* uppercase: String 1:1 required

strTrim(string): trim
'''''''''''''''''''''

* string: String 1:1 required

* trim: String 1:1 required

strTrim2(string, method, character): trim
'''''''''''''''''''''''''''''''''''''''''

* string: String 1:1 required

* method: String 1:1 required

* character: String 1:1 required

* trim: String 1:1 required

strURLEncode(encodeable, formUrlEncode): strURLEncode
'''''''''''''''''''''''''''''''''''''''''''''''''''''

* encodeable: String 1:1 required

* formUrlEncode: Boolean 0:1 optional

* strURLEncode: String 1:1 required

stringTemplate(input, pattern, template, defaultValue): return
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* input

* pattern

* template

* defaultValue

* return

symDifference(geometry, geometry): symetric difference
''''''''''''''''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* geometry: Geometry 1:1 required

* symetric difference: Geometry 1:1 required

tan(radians): tan
'''''''''''''''''

* radians: Number 1:1 required

* tan: Double 1:1 required

tint(color, weight): result
'''''''''''''''''''''''''''

* color: Color 1:1 required

* weight: Double 1:1 required

* result: Color 1:1 required

toDegrees(radians): degrees
'''''''''''''''''''''''''''

* radians: Number 1:1 required

* degrees: Double 1:1 required

toRadians(degree): radians
''''''''''''''''''''''''''

* degree: Number 1:1 required

* radians: Double 1:1 required

toWKT(geometry): wkt
''''''''''''''''''''

* geometry: Geometry 1:1 required

* wkt: String 1:1 required

touches(geometry, geometry): touches
''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* geometry: Geometry 1:1 required

* touches: Boolean 1:1 required

union(geometry, geometry): union
''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* geometry: Geometry 1:1 required

* union: Geometry 1:1 required

vertices(geometry): vertices
''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* vertices: MultiPoint 1:1 required

within(geometry, geometry): within
''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* geometry: Geometry 1:1 required

* within: Boolean 1:1 required

ProcessFunctionFactory
^^^^^^^^^^^^^^^^^^^^^^

Contains 258 functions.

AddCoverages(coverageA, coverageB): result
''''''''''''''''''''''''''''''''''''''''''

* coverageA: GridCoverage2D 1:1 required

* coverageB: GridCoverage2D 1:1 required

* result: GridCoverage2D 1:1 required

Affine(coverage, scalex, scaley, shearx, sheary, translatex, translatey, nodata, interpolation): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* coverage: GridCoverage2D 1:1 required

* scalex: Double 0:1 optional

* scaley: Double 0:1 optional

* shearx: Double 0:1 optional

* sheary: Double 0:1 optional

* translatex: Double 0:1 optional

* translatey: Double 0:1 optional

* nodata: double 0:unbounded

* interpolation: Interpolation 0:1 optional

* result: GridCoverage2D 1:1 required

Aggregate(features, aggregationAttribute, function, singlePass, groupByAttributes): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* aggregationAttribute: String 0:1 optional

* function: AggregationFunction 0:unbounded

* singlePass: Boolean 1:1 required

* groupByAttributes: String 0:unbounded

* result: Results 1:1 required

AreaGrid(envelope, width, height): result
'''''''''''''''''''''''''''''''''''''''''

* envelope: ReferencedEnvelope 1:1 required

* width: Integer 1:1 required

* height: Integer 1:1 required

* result: GridCoverage2D 1:1 required

AttributeJoin(inputFeatures, primaryKey, joinFeatures, foreignKey, joinType): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* primaryKey: String 1:1 required

* joinFeatures: SimpleFeatureCollection 1:1 required

* foreignKey: String 1:1 required

* joinType: Type 0:1 optional

* result: SimpleFeatureCollection 1:1 required

BandMerge(coverages, roi, transformChoice, index): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* coverages: GridCoverage2D 1:unbounded required

* roi: Geometry 0:1 optional

* transformChoice: String 0:1 optional

* index: Integer 0:1 optional

* result: GridCoverage2D 1:1 required

BandSelect(coverage, SampleDimensions, VisibleSampleDimension): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* coverage: GridCoverage2D 1:1 required

* SampleDimensions: int 1:unbounded required

* VisibleSampleDimension: Integer 0:1 optional

* result: GridCoverage2D 1:1 required

BarnesSurface(data, valueAttr, dataLimit, scale, convergence, passes, minObservations, maxObservationDistance, noDataValue, pixelsPerCell, queryBuffer, outputBBOX, outputWidth, outputHeight): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* data: SimpleFeatureCollection 1:1 required

* valueAttr: String 1:1 required

* dataLimit: Integer 0:1 optional

* scale: Double 1:1 required

* convergence: Double 0:1 optional

* passes: Integer 0:1 optional

* minObservations: Integer 0:1 optional

* maxObservationDistance: Double 0:1 optional

* noDataValue: Double 0:1 optional

* pixelsPerCell: Integer 0:1 optional

* queryBuffer: Double 0:1 optional

* outputBBOX: ReferencedEnvelope 1:1 required

* outputWidth: Integer 1:1 required

* outputHeight: Integer 1:1 required

* result: GridCoverage2D 1:1 required

Bounds(features): bounds
''''''''''''''''''''''''

* features: FeatureCollection 1:1 required

* bounds: ReferencedEnvelope 1:1 required

BufferFeatureCollection(features, distance, attributeName): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* distance: Double 1:1 required

* attributeName: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

BufferFeatures(inputFeatures, distance, distanceUnit, quadrantSegments): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* distance: Expression 1:1 required

* distanceUnit: DistanceUnit 0:1 optional

* quadrantSegments: Integer 0:1 optional

* result: SimpleFeatureCollection 1:1 required

BufferPointStatistics(inputFeatures, distance, pointFeatures, countField, statisticsFields): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* distance: Double 1:1 required

* pointFeatures: SimpleFeatureCollection 1:1 required

* countField: String 0:1 optional

* statisticsFields: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

CalculateArea(inputFeatures, areaField, areaUnit, perimeterField, perimeterUnit): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* areaField: String 0:1 optional

* areaUnit: AreaUnit 0:1 optional

* perimeterField: String 0:1 optional

* perimeterUnit: DistanceUnit 0:1 optional

* result: SimpleFeatureCollection 1:1 required

CalculateField(inputFeatures, expression, fieldName): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* expression: Expression 1:1 required

* fieldName: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

CalculateLength(inputFeatures, lengthField, lengthUnit): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* lengthField: String 0:1 optional

* lengthUnit: DistanceUnit 0:1 optional

* result: SimpleFeatureCollection 1:1 required

CalculateXYCoordinate(inputFeatures, xField, yField, inside, targetCRS): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* xField: String 0:1 optional

* yField: String 0:1 optional

* inside: Boolean 0:1 optional

* targetCRS: CoordinateReferenceSystem 0:1 optional

* result: SimpleFeatureCollection 1:1 required

CentralFeature(inputFeatures, distanceMethod, weightField, selfPotentialWeightField, caseField): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* distanceMethod: DistanceMethod 0:1 optional

* weightField: String 0:1 optional

* selfPotentialWeightField: String 0:1 optional

* caseField: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

Centroid(features): result
''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

CircularBinning(features, weight, bbox, radius, validGrid): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* weight: Expression 0:1 optional

* bbox: ReferencedEnvelope 0:1 optional

* radius: Double 1:1 required

* validGrid: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

CircularGrid(extent, boundsSource, radius, circularType): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* extent: ReferencedEnvelope 1:1 required

* boundsSource: SimpleFeatureCollection 0:1 optional

* radius: Double 1:1 required

* circularType: CircularType 0:1 optional

* result: SimpleFeatureCollection 1:1 required

ClassifyByRange(features, classifyOnAttribute, thresholds, outputValues, classifier, classes, include, outputAttribute, outputType): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* classifyOnAttribute: String 1:1 required

* thresholds: String 0:unbounded

* outputValues: String 0:unbounded

* classifier: String 0:1 optional

* classes: Integer 0:1 optional

* include: Boolean 0:1 optional

* outputAttribute: String 0:1 optional

* outputType: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

Clip(features, clip, preserveZ): result
'''''''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* clip: Geometry 1:1 required

* preserveZ: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

ClipWithFeatures(inputFeatures, clipFeatures): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* clipFeatures: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

ClipWithGeometry(inputFeatures, clipGeometry): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* clipGeometry: Geometry 1:1 required

* result: SimpleFeatureCollection 1:1 required

CollectEvents(inputFeatures, countField, tolerance): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* countField: String 0:1 optional

* tolerance: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

CollectGeometries(features): result
'''''''''''''''''''''''''''''''''''

* features: FeatureCollection 1:1 required

* result: GeometryCollection 1:1 required

Contour(data, band, levels, interval, simplify, smooth, roi): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* data: GridCoverage2D 1:1 required

* band: Integer 0:1 optional

* levels: double 0:unbounded

* interval: Double 0:1 optional

* simplify: Boolean 0:1 optional

* smooth: Boolean 0:1 optional

* roi: Geometry 0:1 optional

* result: SimpleFeatureCollection 1:1 required

ConvolveCoverage(data, kernel, kernelRadius, kernelWidth, kernelHeight): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* data: GridCoverage2D 1:1 required

* kernel: KernelJAI 0:1 optional

* kernelRadius: Integer 0:1 optional

* kernelWidth: Integer 0:1 optional

* kernelHeight: Integer 0:1 optional

* result: GridCoverage2D 1:1 required

Count(features): result
'''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* result: Number 1:1 required

CountFeatures(inputFeatures, filter): result
''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* filter: Filter 0:1 optional

* result: Integer 1:1 required

CoverageClassStats(coverage, stats, band, classes, method, noData): results
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* coverage: GridCoverage2D 1:1 required

* stats: Statistic 0:unbounded

* band: Integer 0:1 optional

* classes: Integer 0:1 optional

* method: ClassificationMethod 0:1 optional

* noData: Double 0:1 optional

* results: Results 1:1 required

CropCoverage(coverage, cropShape): result
'''''''''''''''''''''''''''''''''''''''''

* coverage: GridCoverage2D 1:1 required

* cropShape: Geometry 1:1 required

* result: GridCoverage2D 1:1 required

DelaunayTriangulation(inputFeatures, clipArea): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* clipArea: Geometry 0:1 optional

* result: SimpleFeatureCollection 1:1 required

DeleteDuplicates(inputFeatures): result
'''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

Densify(inputFeatures, tolerance): result
'''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* tolerance: Expression 1:1 required

* result: SimpleFeatureCollection 1:1 required

Difference(inputFeatures, differenceFeatures): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* differenceFeatures: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

Dissolve(inputFeatures, dissolveField, statisticsFields, useMultiPart): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* dissolveField: String 1:1 required

* statisticsFields: String 0:1 optional

* useMultiPart: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

Eliminate(inputFeatures, option, exception): result
'''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* option: EliminateOption 0:1 optional

* exception: Filter 0:1 optional

* result: SimpleFeatureCollection 1:1 required

EuclideanDistance(inputFeatures, maximumDistance, cellSize, extent): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* maximumDistance: Double 0:1 optional

* cellSize: Double 0:1 optional

* extent: ReferencedEnvelope 0:1 optional

* result: GridCoverage2D 1:1 required

ExtendLine(lineFeatures, length, extendTo): result
''''''''''''''''''''''''''''''''''''''''''''''''''

* lineFeatures: SimpleFeatureCollection 1:1 required

* length: Double 1:1 required

* extendTo: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

ExtractValuesToPoints(pointFeatures, valueField, valueCoverage, valueType): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* pointFeatures: SimpleFeatureCollection 1:1 required

* valueField: String 0:1 optional

* valueCoverage: GridCoverage2D 1:1 required

* valueType: ExtractionType 0:1 optional

* result: SimpleFeatureCollection 1:1 required

Feature(geometry, crs, typeName): result
''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* crs: CoordinateReferenceSystem 1:1 required

* typeName: String 1:1 required

* result: SimpleFeatureCollection 1:1 required

FeatureClassStats(features, attribute, stats, classes, method, noData): results
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* features: FeatureCollection 1:1 required

* attribute: String 1:1 required

* stats: Statistic 0:unbounded

* classes: Integer 0:1 optional

* method: ClassificationMethod 0:1 optional

* noData: Double 0:1 optional

* results: Results 1:1 required

FeatureEnvelopeToPolygon(inputFeatures, singleEnvelope): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* singleEnvelope: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

FeatureToConvexHull(inputFeatures, singlePart): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* singlePart: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

FeatureToLine(inputFeatures, preserveAttributes): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* preserveAttributes: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

FeatureToMinimumBoundingCircle(inputFeatures, singlePart): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* singlePart: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

FeatureToMinimumRectangle(inputFeatures, singlePart): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* singlePart: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

FeatureToOctagonalEnvelope(inputFeatures, singlePart): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* singlePart: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

FeatureToPoint(inputFeatures, inside, singlePart): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inside: Boolean 0:1 optional

* singlePart: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

FeatureToPolygon(inputFeatures, tolerance, labelFeatures): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* tolerance: Double 0:1 optional

* labelFeatures: SimpleFeatureCollection 0:1 optional

* result: SimpleFeatureCollection 1:1 required

FeaturesToRaster(inputFeatures, inputField, cellSize, extent): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputField: String 0:1 optional

* cellSize: Double 0:1 optional

* extent: ReferencedEnvelope 0:1 optional

* result: GridCoverage2D 1:1 required

FishnetCount(extent, boundsSource, boundaryInside, columns, rows): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* extent: ReferencedEnvelope 1:1 required

* boundsSource: SimpleFeatureCollection 0:1 optional

* boundaryInside: Boolean 0:1 optional

* columns: Integer 1:1 required

* rows: Integer 1:1 required

* result: SimpleFeatureCollection 1:1 required

FishnetSize(extent, boundsSource, boundaryInside, width, height): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* extent: ReferencedEnvelope 1:1 required

* boundsSource: SimpleFeatureCollection 0:1 optional

* boundaryInside: Boolean 0:1 optional

* width: Double 1:1 required

* height: Double 1:1 required

* result: SimpleFeatureCollection 1:1 required

FlipLine(lineFeatures): result
''''''''''''''''''''''''''''''

* lineFeatures: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

FlowMap(lineFeatures, odValue, doValue, maxSize): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* lineFeatures: SimpleFeatureCollection 1:1 required

* odValue: Expression 1:1 required

* doValue: Expression 0:1 optional

* maxSize: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

FocalLQ(inputFeatures, xField, yField, spatialConcept, distanceMethod, searchDistance): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* xField: Expression 1:1 required

* yField: Expression 1:1 required

* spatialConcept: SpatialConcept 0:1 optional

* distanceMethod: DistanceMethod 0:1 optional

* searchDistance: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

GeometryToFeatures(geometry, crs, typeName, singlePart): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* crs: CoordinateReferenceSystem 0:1 optional

* typeName: String 0:1 optional

* singlePart: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

GeometryToRaster(inputGeometry, forcedCRS, defaultValue, pixelType, cellSize, extent): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputGeometry: Geometry 1:1 required

* forcedCRS: CoordinateReferenceSystem 0:1 optional

* defaultValue: Number 0:1 optional

* pixelType: RasterPixelType 0:1 optional

* cellSize: Double 0:1 optional

* extent: ReferencedEnvelope 0:1 optional

* result: GridCoverage2D 1:1 required

GlobalGStatistics(inputFeatures, inputField, spatialConcept, distanceMethod, standardization, searchDistance): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputField: String 1:1 required

* spatialConcept: SpatialConcept 0:1 optional

* distanceMethod: DistanceMethod 0:1 optional

* standardization: StandardizationMethod 0:1 optional

* searchDistance: Double 0:1 optional

* result: GStatisticsProcessResult 1:1 required

GlobalGearysC(inputFeatures, inputField, spatialConcept, distanceMethod, standardization, searchDistance): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputField: String 1:1 required

* spatialConcept: SpatialConcept 0:1 optional

* distanceMethod: DistanceMethod 0:1 optional

* standardization: StandardizationMethod 0:1 optional

* searchDistance: Double 0:1 optional

* result: GearysCProcessResult 1:1 required

GlobalLeesL(inputFeatures, xField, yField, spatialConcept, distanceMethod, standardization, searchDistance, selfNeighbors): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* xField: String 1:1 required

* yField: String 1:1 required

* spatialConcept: SpatialConcept 0:1 optional

* distanceMethod: DistanceMethod 0:1 optional

* standardization: StandardizationMethod 0:1 optional

* searchDistance: Double 0:1 optional

* selfNeighbors: Boolean 0:1 optional

* result: LeesLProcessResult 1:1 required

GlobalLeesS(inputFeatures, inputField, spatialConcept, distanceMethod, standardization, searchDistance, selfNeighbors): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputField: String 1:1 required

* spatialConcept: SpatialConcept 0:1 optional

* distanceMethod: DistanceMethod 0:1 optional

* standardization: StandardizationMethod 0:1 optional

* searchDistance: Double 0:1 optional

* selfNeighbors: Boolean 0:1 optional

* result: LeesSProcessResult 1:1 required

GlobalMoransI(inputFeatures, inputField, spatialConcept, distanceMethod, standardization, searchDistance): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputField: String 1:1 required

* spatialConcept: SpatialConcept 0:1 optional

* distanceMethod: DistanceMethod 0:1 optional

* standardization: StandardizationMethod 0:1 optional

* searchDistance: Double 0:1 optional

* result: MoransIProcessResult 1:1 required

GlobalRogersonR(inputFeatures, xField, yField, distanceMethod, kappa): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* xField: String 1:1 required

* yField: String 1:1 required

* distanceMethod: DistanceMethod 0:1 optional

* kappa: Double 0:1 optional

* result: RogersonRProcessResult 1:1 required

Grid(bounds, width, height, vertexSpacing, mode): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* bounds: ReferencedEnvelope 1:1 required

* width: Double 1:1 required

* height: Double 0:1 optional

* vertexSpacing: Double 0:1 optional

* mode: GridMode 1:1 required

* result: SimpleFeatureCollection 1:1 required

Heatmap(data, radiusPixels, weightAttr, pixelsPerCell, outputBBOX, outputWidth, outputHeight): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* data: SimpleFeatureCollection 1:1 required

* radiusPixels: Integer 1:1 required

* weightAttr: String 0:1 optional

* pixelsPerCell: Integer 0:1 optional

* outputBBOX: ReferencedEnvelope 1:1 required

* outputWidth: Integer 1:1 required

* outputHeight: Integer 1:1 required

* result: GridCoverage2D 1:1 required

Hexagon(extent, boundsSource, sideLen, orientation): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* extent: ReferencedEnvelope 1:1 required

* boundsSource: SimpleFeatureCollection 0:1 optional

* sideLen: Double 1:1 required

* orientation: HexagonOrientation 0:1 optional

* result: SimpleFeatureCollection 1:1 required

HexagonalBinning(features, weight, bbox, size, validGrid): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* weight: Expression 0:1 optional

* bbox: ReferencedEnvelope 0:1 optional

* size: Double 1:1 required

* validGrid: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

HistogramGridCoverage(inputCoverage, bandIndex, cropShape): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* bandIndex: Integer 0:1 optional

* cropShape: Geometry 0:1 optional

* result: HistogramProcessResult 1:1 required

HubLinesByDistance(hubFeatures, hubIdField, spokeFeatures, preserveAttributes, useCentroid, useBezierCurve, maximumDistance): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* hubFeatures: SimpleFeatureCollection 1:1 required

* hubIdField: String 0:1 optional

* spokeFeatures: SimpleFeatureCollection 1:1 required

* preserveAttributes: Boolean 0:1 optional

* useCentroid: Boolean 0:1 optional

* useBezierCurve: Boolean 0:1 optional

* maximumDistance: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

HubLinesByID(hubFeatures, hubIdField, spokeFeatures, spokeIdField, preserveAttributes, useCentroid, useBezierCurve, maximumDistance): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* hubFeatures: SimpleFeatureCollection 1:1 required

* hubIdField: String 1:1 required

* spokeFeatures: SimpleFeatureCollection 1:1 required

* spokeIdField: String 1:1 required

* preserveAttributes: Boolean 0:1 optional

* useCentroid: Boolean 0:1 optional

* useBezierCurve: Boolean 0:1 optional

* maximumDistance: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

IDW(inputFeatures, inputField, power, radiusType, numberOfPoints, distance, cellSize, extent): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputField: String 1:1 required

* power: Double 0:1 optional

* radiusType: RadiusType 0:1 optional

* numberOfPoints: Integer 0:1 optional

* distance: Double 0:1 optional

* cellSize: Double 0:1 optional

* extent: ReferencedEnvelope 0:1 optional

* result: GridCoverage2D 1:1 required

Identity(inputFeatures, identityFeatures): result
'''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* identityFeatures: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

InclusionFeatureCollection(first, second): result
'''''''''''''''''''''''''''''''''''''''''''''''''

* first: SimpleFeatureCollection 1:1 required

* second: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

Intersect(inputFeatures, overlayFeatures): result
'''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* overlayFeatures: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

IntersectionFeatureCollection(first feature collection, second feature collection, first attributes to retain, second attributes to retain, intersectionMode, percentagesEnabled, areasEnabled): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* first feature collection: SimpleFeatureCollection 1:1 required

* second feature collection: SimpleFeatureCollection 1:1 required

* first attributes to retain: String 0:unbounded

* second attributes to retain: String 0:unbounded

* intersectionMode: IntersectionMode 0:1 optional

* percentagesEnabled: Boolean 0:1 optional

* areasEnabled: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

IntersectionPoints(inputFeatures, intersectFeatures, intersectIDField): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* intersectFeatures: SimpleFeatureCollection 1:1 required

* intersectIDField: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

Jiffle(coverage, script, destName, sourceName, outputType): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* coverage: GridCoverage2D 0:unbounded

* script: String 1:1 required

* destName: String 0:1 optional

* sourceName: String 0:unbounded

* outputType: DataType 0:1 optional

* result: GridCoverage2D 1:1 required

JoinCount(inputFeatures, blackExpression, contiguityType): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* blackExpression: Filter 1:1 required

* contiguityType: ContiguityType 0:1 optional

* result: JoinCountProcessResult 1:1 required

KMeansClustering(inputFeatures, targetField, numberOfClusters, asCircle): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* targetField: String 1:1 required

* numberOfClusters: Integer 1:1 required

* asCircle: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

KNearestNeighborMap(inputFeatures, neighbor, convexHull): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* neighbor: Integer 1:1 required

* convexHull: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

KernelDensity(inputFeatures, kernelType, populationField, searchRadius, cellSize, extent): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* kernelType: KernelType 0:1 optional

* populationField: String 0:1 optional

* searchRadius: Double 0:1 optional

* cellSize: Double 0:1 optional

* extent: ReferencedEnvelope 0:1 optional

* result: GridCoverage2D 1:1 required

LRSGeocode(features, from_measure_attb, to_measure_attb, measure): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* features: FeatureCollection 1:1 required

* from_measure_attb: String 1:1 required

* to_measure_attb: String 1:1 required

* measure: Double 1:1 required

* result: FeatureCollection 1:1 required

LRSMeasure(features, from_measure_attb, to_measure_attb, point, crs): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* features: FeatureCollection 1:1 required

* from_measure_attb: String 1:1 required

* to_measure_attb: String 1:1 required

* point: Point 1:1 required

* crs: CoordinateReferenceSystem 0:1 optional

* result: FeatureCollection 1:1 required

LRSSegment(features, from_measure_attb, to_measure_attb, from_measure, to_measure): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* features: FeatureCollection 1:1 required

* from_measure_attb: String 1:1 required

* to_measure_attb: String 1:1 required

* from_measure: Double 1:1 required

* to_measure: Double 1:1 required

* result: FeatureCollection 1:1 required

LineDensity(inputFeatures, populationField, searchRadius, cellSize, extent): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* populationField: String 0:1 optional

* searchRadius: Double 0:1 optional

* cellSize: Double 0:1 optional

* extent: ReferencedEnvelope 0:1 optional

* result: GridCoverage2D 1:1 required

LinearDirectionalMean(inputFeatures, orientationOnly, caseField): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* orientationOnly: Boolean 0:1 optional

* caseField: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

LinearLineOfSight(inputCoverage, observerPoint, observerOffset, targetPoint, useCurvature, useRefraction, refractionFactor): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* observerPoint: Geometry 1:1 required

* observerOffset: Double 1:1 required

* targetPoint: Geometry 1:1 required

* useCurvature: Boolean 0:1 optional

* useRefraction: Boolean 0:1 optional

* refractionFactor: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

LocalGStatistics(inputFeatures, inputField, spatialConcept, distanceMethod, standardization, searchDistance): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputField: String 1:1 required

* spatialConcept: SpatialConcept 0:1 optional

* distanceMethod: DistanceMethod 0:1 optional

* standardization: StandardizationMethod 0:1 optional

* searchDistance: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

LocalGearysC(inputFeatures, inputField, spatialConcept, distanceMethod, standardization, searchDistance): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputField: String 1:1 required

* spatialConcept: SpatialConcept 0:1 optional

* distanceMethod: DistanceMethod 0:1 optional

* standardization: StandardizationMethod 0:1 optional

* searchDistance: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

LocalLeesL(inputFeatures, xField, yField, spatialConcept, distanceMethod, standardization, searchDistance, selfNeighbors): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* xField: String 1:1 required

* yField: String 1:1 required

* spatialConcept: SpatialConcept 0:1 optional

* distanceMethod: DistanceMethod 0:1 optional

* standardization: StandardizationMethod 0:1 optional

* searchDistance: Double 0:1 optional

* selfNeighbors: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

LocalLeesS(inputFeatures, inputField, spatialConcept, distanceMethod, standardization, searchDistance, selfNeighbors): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputField: String 1:1 required

* spatialConcept: SpatialConcept 0:1 optional

* distanceMethod: DistanceMethod 0:1 optional

* standardization: StandardizationMethod 0:1 optional

* searchDistance: Double 0:1 optional

* selfNeighbors: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

LocalMoransI(inputFeatures, inputField, spatialConcept, distanceMethod, standardization, searchDistance): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputField: String 1:1 required

* spatialConcept: SpatialConcept 0:1 optional

* distanceMethod: DistanceMethod 0:1 optional

* standardization: StandardizationMethod 0:1 optional

* searchDistance: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

LocalRogersonR(inputFeatures, xField, yField, distanceMethod, kappa): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* xField: String 1:1 required

* yField: String 1:1 required

* distanceMethod: DistanceMethod 0:1 optional

* kappa: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

MeanCenter(inputFeatures, weightField, caseField, dimensionField): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* weightField: String 0:1 optional

* caseField: String 0:1 optional

* dimensionField: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

MedianCenter(inputFeatures, weightField, caseField, attributeFields): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* weightField: String 0:1 optional

* caseField: String 0:1 optional

* attributeFields: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

MergeFeatures(features): result
'''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:unbounded required

* result: SimpleFeatureCollection 1:1 required

MultipartToSinglepart(inputFeatures): result
''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

MultipleRingBuffer(inputFeatures, distances, distanceUnit, outsideOnly, dissolve): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* distances: String 1:1 required

* distanceUnit: DistanceUnit 0:1 optional

* outsideOnly: Boolean 0:1 optional

* dissolve: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

MultiplyCoverages(coverageA, coverageB): result
'''''''''''''''''''''''''''''''''''''''''''''''

* coverageA: GridCoverage2D 1:1 required

* coverageB: GridCoverage2D 1:1 required

* result: GridCoverage2D 1:1 required

Near(inputFeatures, nearFeatures, nearIdField, maximumDistance): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* nearFeatures: SimpleFeatureCollection 1:1 required

* nearIdField: String 0:1 optional

* maximumDistance: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

Nearest(features, point, crs): result
'''''''''''''''''''''''''''''''''''''

* features: FeatureCollection 1:1 required

* point: Point 1:1 required

* crs: CoordinateReferenceSystem 0:1 optional

* result: FeatureCollection 1:1 required

NearestNeighborCount(inputFeatures, countField, nearFeatures, searchRadius, radiusUnit): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* countField: String 0:1 optional

* nearFeatures: SimpleFeatureCollection 1:1 required

* searchRadius: Double 1:1 required

* radiusUnit: DistanceUnit 0:1 optional

* result: SimpleFeatureCollection 1:1 required

NearestNeighborIndex(inputFeatures, distanceMethod, area): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* distanceMethod: DistanceMethod 0:1 optional

* area: Double 0:1 optional

* result: NearestNeighborResult 1:1 required

NormalizeCoverage(data): result
'''''''''''''''''''''''''''''''

* data: GridCoverage2D 1:1 required

* result: GridCoverage2D 1:1 required

OffsetFeatures(inputFeatures, offsetX, offsetY): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* offsetX: Double 0:1 required

* offsetY: Double 0:1 required

* result: SimpleFeatureCollection 1:1 required

OrdinaryLeastSquares(inputFeatures, dependentVariable, explanatoryVariables): report
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* dependentVariable: String 1:1 required

* explanatoryVariables: String 1:1 required

* report: OLSResult 1:1 required

Pearson(inputFeatures, inputFields): result
'''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputFields: String 1:1 required

* result: PearsonResult 1:1 required

PointBuffers(center, crs, distances, quadrantSegments): buffers
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* center: Point 1:1 required

* crs: CoordinateReferenceSystem 0:1 optional

* distances: double 0:unbounded

* quadrantSegments: Integer 0:1 optional

* buffers: SimpleFeatureCollection 1:1 required

PointDensity(inputFeatures, populationField, neighborhood, cellSize, extent): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* populationField: String 0:1 optional

* neighborhood: String 0:1 optional

* cellSize: Double 0:1 optional

* extent: ReferencedEnvelope 0:1 optional

* result: GridCoverage2D 1:1 required

PointStacker(data, cellSize, weightClusterPosition, normalize, preserveLocation, outputBBOX, outputWidth, outputHeight): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* data: SimpleFeatureCollection 1:1 required

* cellSize: Integer 1:1 required

* weightClusterPosition: Boolean 1:1 required

* normalize: Boolean 1:1 required

* preserveLocation: PreserveLocation 0:1 optional

* outputBBOX: ReferencedEnvelope 1:1 required

* outputWidth: Integer 1:1 required

* outputHeight: Integer 1:1 required

* result: SimpleFeatureCollection 1:1 required

PointStatistics(polygonFeatures, pointFeatures, countField, statisticsFields): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* polygonFeatures: SimpleFeatureCollection 1:1 required

* pointFeatures: SimpleFeatureCollection 1:1 required

* countField: String 0:1 optional

* statisticsFields: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

PointsAlongLines(lineFeatures, distance): result
''''''''''''''''''''''''''''''''''''''''''''''''

* lineFeatures: SimpleFeatureCollection 1:1 required

* distance: Expression 1:1 required

* result: SimpleFeatureCollection 1:1 required

PointsToLine(inputFeatures, lineField, sortField, useBezierCurve, closeLine): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* lineField: String 0:1 optional

* sortField: String 0:1 optional

* useBezierCurve: Boolean 0:1 optional

* closeLine: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

PointsToRaster(inputFeatures, inputField, cellAssignment, cellSize, extent): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputField: String 1:1 required

* cellAssignment: PointAssignmentType 0:1 optional

* cellSize: Double 0:1 optional

* extent: ReferencedEnvelope 0:1 optional

* result: GridCoverage2D 1:1 required

PolarGridsFromFeatures(origin, radius, radialType, sides): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* origin: SimpleFeatureCollection 1:1 required

* radius: String 1:1 required

* radialType: RadialType 0:1 optional

* sides: Integer 0:1 optional

* result: SimpleFeatureCollection 1:1 required

PolarGridsFromGeometry(origin, radius, radialType, sides): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* origin: Geometry 1:1 required

* radius: String 1:1 required

* radialType: RadialType 0:1 optional

* sides: Integer 0:1 optional

* result: SimpleFeatureCollection 1:1 required

PolyLabeller(polygon, precision): result
''''''''''''''''''''''''''''''''''''''''

* polygon: Geometry 1:1 required

* precision: Double 1:1 required

* result: Geometry 1:1 required

PolygonExtraction(data, band, insideEdges, roi, nodata, ranges): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* data: GridCoverage2D 1:1 required

* band: Integer 0:1 optional

* insideEdges: Boolean 0:1 optional

* roi: Geometry 0:1 optional

* nodata: Number 0:unbounded

* ranges: Range 0:unbounded

* result: SimpleFeatureCollection 1:1 required

QuadratAnalysis(inputFeatures, cellSize): result
''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* cellSize: Double 0:1 optional

* result: QuadratResult 1:1 required

Query(features, attribute, filter): result
''''''''''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* attribute: String 0:unbounded

* filter: Filter 0:1 optional

* result: SimpleFeatureCollection 1:1 required

RadialLineOfSight(inputCoverage, observerPoint, observerOffset, radius, sides, useCurvature, useRefraction, refractionFactor): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* observerPoint: Geometry 1:1 required

* observerOffset: Double 1:1 required

* radius: Double 1:1 required

* sides: Integer 0:1 optional

* useCurvature: Boolean 0:1 optional

* useRefraction: Boolean 0:1 optional

* refractionFactor: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

RandomPoints(extent, polygonFeatures, pointCount): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* extent: ReferencedEnvelope 1:1 required

* polygonFeatures: SimpleFeatureCollection 0:1 optional

* pointCount: Integer 1:1 required

* result: SimpleFeatureCollection 1:1 required

RandomPointsPerFeatures(polygonFeatures, expression): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* polygonFeatures: SimpleFeatureCollection 1:1 required

* expression: Expression 1:1 required

* result: SimpleFeatureCollection 1:1 required

RangeLookup(coverage, band, ranges, outputPixelValues, noData): reclassified
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* coverage: GridCoverage2D 1:1 required

* band: Integer 0:1 optional

* ranges: Range 0:unbounded

* outputPixelValues: int 0:unbounded

* noData: Double 0:1 optional

* reclassified: GridCoverage2D 1:1 required

RasterAsPointCollection(data, targetCRS, scale, interpolation, emisphere): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* data: GridCoverage2D 1:1 required

* targetCRS: CoordinateReferenceSystem 0:1 optional

* scale: Float 0:1 optional

* interpolation: Interpolation 0:1 optional

* emisphere: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

RasterAspect(inputCoverage): result
'''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* result: GridCoverage2D 1:1 required

RasterClipByCircle(inputCoverage, center, radius, inside): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* center: Geometry 1:1 required

* radius: Double 1:1 required

* inside: Boolean 0:1 optional

* result: GridCoverage2D 1:1 required

RasterClipByExtent(inputCoverage, cropShape): result
''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* cropShape: ReferencedEnvelope 1:1 required

* result: GridCoverage2D 1:1 required

RasterClipByFeatures(inputCoverage, cropFeatures): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* cropFeatures: SimpleFeatureCollection 1:1 required

* result: GridCoverage2D 1:1 required

RasterClipByGeometry(inputCoverage, cropShape): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* cropShape: Geometry 1:1 required

* result: GridCoverage2D 1:1 required

RasterCon(inputCoverage, bandIndex, filter, trueValue, falseValue): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* bandIndex: Integer 0:1 optional

* filter: Filter 1:1 required

* trueValue: Integer 1:1 required

* falseValue: Integer 0:1 optional

* result: GridCoverage2D 1:1 required

RasterCurvature(inputCoverage, zFactor): result
'''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* zFactor: Double 0:1 optional

* result: GridCoverage2D 1:1 required

RasterDescribe(inputCoverage, detailed): result
'''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* detailed: Boolean 0:1 optional

* result: RasterDescribeResult 1:1 required

RasterExtraction(inputCoverage, bandIndex, filter): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* bandIndex: Integer 0:1 optional

* filter: Filter 1:1 required

* result: GridCoverage2D 1:1 required

RasterFlip(inputCoverage): result
'''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* result: GridCoverage2D 1:1 required

RasterForceCRS(inputCoverage, forcedCRS): result
''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* forcedCRS: CoordinateReferenceSystem 1:1 required

* result: GridCoverage2D 1:1 required

RasterHighLowPoints(inputCoverage, bandIndex, cropShape, valueType): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* bandIndex: Integer 0:1 optional

* cropShape: Geometry 0:1 optional

* valueType: HighLowType 1:1 required

* result: SimpleFeatureCollection 1:1 required

RasterHillshade(inputCoverage, azimuth, altitude, zFactor): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* azimuth: Double 0:1 optional

* altitude: Double 0:1 optional

* zFactor: Double 0:1 optional

* result: GridCoverage2D 1:1 required

RasterMath(inputCoverage, bandIndex, expression): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* bandIndex: Integer 0:1 optional

* expression: Expression 1:1 required

* result: GridCoverage2D 1:1 required

RasterMirror(inputCoverage): result
'''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* result: GridCoverage2D 1:1 required

RasterNDVI(nirCoverage, nirIndex, redCoverage, redIndex): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* nirCoverage: GridCoverage2D 1:1 required

* nirIndex: Integer 1:1 required

* redCoverage: GridCoverage2D 1:1 required

* redIndex: Integer 1:1 required

* result: GridCoverage2D 1:1 required

RasterProfile(inputCoverage, userLine, interval): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* userLine: Geometry 1:1 required

* interval: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

RasterReclass(inputCoverage, bandIndex, ranges, retainMissingValues): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* bandIndex: Integer 0:1 optional

* ranges: String 1:1 required

* retainMissingValues: Boolean 0:1 optional

* result: GridCoverage2D 1:1 required

RasterReproject(inputCoverage, targetCRS, resamplingType, cellSize, forcedCRS): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* targetCRS: CoordinateReferenceSystem 1:1 required

* resamplingType: ResampleType 0:1 optional

* cellSize: Double 0:1 optional

* forcedCRS: CoordinateReferenceSystem 0:1 optional

* result: GridCoverage2D 1:1 required

RasterResample(inputCoverage, cellSize, resamplingType): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* cellSize: Double 1:1 required

* resamplingType: ResampleType 0:1 optional

* result: GridCoverage2D 1:1 required

RasterRescale(inputCoverage, xScale, yScale): result
''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* xScale: Double 0:1 optional

* yScale: Double 0:1 optional

* result: GridCoverage2D 1:1 required

RasterRotate(inputCoverage, anchorPoint, angle, interpolation): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* anchorPoint: Point 0:1 optional

* angle: Double 1:1 required

* interpolation: ResampleType 0:1 optional

* result: GridCoverage2D 1:1 required

RasterRoughness(inputCoverage): result
''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* result: GridCoverage2D 1:1 required

RasterSetNull(inputCoverage, bandIndex, filter, replaceNoData, newValue): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* bandIndex: Integer 0:1 optional

* filter: Filter 1:1 required

* replaceNoData: Boolean 0:1 optional

* newValue: Double 0:1 optional

* result: GridCoverage2D 1:1 required

RasterShift(inputCoverage, xShift, yShift): result
''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* xShift: Double 0:1 optional

* yShift: Double 0:1 optional

* result: GridCoverage2D 1:1 required

RasterSlope(inputCoverage, slopeType, zFactor): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* slopeType: SlopeType 0:1 optional

* zFactor: Double 0:1 optional

* result: GridCoverage2D 1:1 required

RasterTPI(inputCoverage): result
''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* result: GridCoverage2D 1:1 required

RasterTRI(inputCoverage): result
''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* result: GridCoverage2D 1:1 required

RasterToGridPolygon(inputCoverage, bandIndex, valueField, retainNoData): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* bandIndex: Integer 0:1 optional

* valueField: String 0:1 optional

* retainNoData: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

RasterToImage(coverage, bbox, crs, style, width, height, format, transparent, bgColor): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* coverage: GridCoverage2D 1:1 required

* bbox: String 0:1 optional

* crs: CoordinateReferenceSystem 0:1 optional

* style: Style 0:1 optional

* width: Integer 1:1 required

* height: Integer 1:1 required

* format: String 0:1 optional

* transparent: Boolean 0:1 optional

* bgColor: String 0:1 optional

* result: MapToImageParam 1:1 required

RasterToPoint(inputCoverage, bandIndex, valueField, retainNoData): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* bandIndex: Integer 0:1 optional

* valueField: String 0:1 optional

* retainNoData: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

RasterToPolygon(inputCoverage, bandIndex, weeding, valueField): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* bandIndex: Integer 0:1 optional

* weeding: Boolean 0:1 optional

* valueField: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

RasterZonalStatistics(data, band, zones, classification): statistics
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* data: GridCoverage2D 1:1 required

* band: Integer 0:1 optional

* zones: SimpleFeatureCollection 1:1 required

* classification: GridCoverage2D 0:1 optional

* statistics: SimpleFeatureCollection 1:1 required

RasterZonalStatistics2(source, bands, zones, classifier, nodata, mask, useROIAccessor, roi, statistics, minbounds, maxbounds, numbins, rangeData, localStats): zonal statistics
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* source: GridCoverage2D 1:1 required

* bands: int 0:unbounded

* zones: Object 0:unbounded

* classifier: GridCoverage2D 0:1 optional

* nodata: Range 1:1 required

* mask: Geometry 1:1 required

* useROIAccessor: Boolean 1:1 required

* roi: Polygon 1:1 required

* statistics: StatsType 0:unbounded

* minbounds: double 0:unbounded

* maxbounds: double 0:unbounded

* numbins: int 0:unbounded

* rangeData: Object 0:unbounded

* localStats: Boolean 1:1 required

* zonal statistics: List 1:1 required

RectangularBinning(features, weight, bbox, width, height, validGrid): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* weight: Expression 0:1 optional

* bbox: ReferencedEnvelope 0:1 optional

* width: Double 1:1 required

* height: Double 1:1 required

* validGrid: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

RectangularClip(features, clip, preserveZ): result
''''''''''''''''''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* clip: ReferencedEnvelope 1:1 required

* preserveZ: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

RemoveHoles(inputFeatures, minimumArea): result
'''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* minimumArea: Expression 0:1 optional

* result: SimpleFeatureCollection 1:1 required

RemoveParts(inputFeatures, minimumArea): result
'''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* minimumArea: Expression 0:1 optional

* result: SimpleFeatureCollection 1:1 required

RepairGeometry(inputFeatures): result
'''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

Reproject(inputFeatures, forcedCRS, targetCRS): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* forcedCRS: CoordinateReferenceSystem 0:1 optional

* targetCRS: CoordinateReferenceSystem 0:1 optional

* result: SimpleFeatureCollection 1:1 required

Reproject(features, forcedCRS, targetCRS): result
'''''''''''''''''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* forcedCRS: CoordinateReferenceSystem 0:1 optional

* targetCRS: CoordinateReferenceSystem 0:1 optional

* result: SimpleFeatureCollection 1:1 required

RingMap(inputFeatures, fields, targetField, ringGap): anchor
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* fields: String 1:1 required

* targetField: String 0:1 optional

* ringGap: Integer 0:1 optional

* anchor: SimpleFeatureCollection 1:1 required

ScaleCoverage(coverage, xScale, yScale, xTranslate, yTranslate, interpolation): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* coverage: GridCoverage2D 1:1 required

* xScale: Double 1:1 required

* yScale: Double 1:1 required

* xTranslate: Double 1:1 required

* yTranslate: Double 1:1 required

* interpolation: Interpolation 0:1 optional

* result: GridCoverage2D 1:1 required

SelectFeatures(inputFeatures, filter, attributes): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* filter: Filter 1:1 required

* attributes: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

Simplify(inputFeatures, tolerance, preserveTopology): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* tolerance: Expression 1:1 required

* preserveTopology: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

Simplify(features, distance, preserveTopology): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* distance: Double 1:1 required

* preserveTopology: Boolean 1:1 required

* result: SimpleFeatureCollection 1:1 required

SingleSidedBuffer(inputFeatures, distance, distanceUnit, quadrantSegments): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* distance: Expression 1:1 required

* distanceUnit: DistanceUnit 0:1 optional

* quadrantSegments: Integer 0:1 optional

* result: SimpleFeatureCollection 1:1 required

SinglepartToMultipart(inputFeatures, caseField, dissolve): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* caseField: String 1:1 required

* dissolve: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

Snap(features, point, crs): result
''''''''''''''''''''''''''''''''''

* features: FeatureCollection 1:1 required

* point: Point 1:1 required

* crs: CoordinateReferenceSystem 0:1 optional

* result: FeatureCollection 1:1 required

SnapPointsToLines(pointFeatures, lineFeatures, tolerance): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* pointFeatures: SimpleFeatureCollection 1:1 required

* lineFeatures: SimpleFeatureCollection 1:1 required

* tolerance: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

SpatialClumpMap(inputFeatures, radius, radiusUnit, quadrantSegments): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* radius: Expression 1:1 required

* radiusUnit: DistanceUnit 0:1 optional

* quadrantSegments: Integer 0:1 optional

* result: SimpleFeatureCollection 1:1 required

SpatialJoin(inputFeatures, joinFeatures, joinType, searchRadius, radiusUnit): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* joinFeatures: SimpleFeatureCollection 1:1 required

* joinType: SpatialJoinType 0:1 optional

* searchRadius: Double 0:1 optional

* radiusUnit: DistanceUnit 0:1 optional

* result: SimpleFeatureCollection 1:1 required

SplitLineAtPoint(lineFeatures, pointFeatures, tolerance): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* lineFeatures: SimpleFeatureCollection 1:1 required

* pointFeatures: SimpleFeatureCollection 1:1 required

* tolerance: Double 0:1 optional

* result: SimpleFeatureCollection 1:1 required

SplitLineAtVertices(lineFeatures): result
'''''''''''''''''''''''''''''''''''''''''

* lineFeatures: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

SplitLineByDistance(lineFeatures, distance): result
'''''''''''''''''''''''''''''''''''''''''''''''''''

* lineFeatures: SimpleFeatureCollection 1:1 required

* distance: Expression 1:1 required

* result: SimpleFeatureCollection 1:1 required

StandardDeviationalEllipse(inputFeatures, ellipseSize, weightField, caseField): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* ellipseSize: String 0:1 optional

* weightField: String 0:1 optional

* caseField: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

StandardDistance(inputFeatures, circleSize, weightField, caseField): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* circleSize: String 0:1 optional

* weightField: String 0:1 optional

* caseField: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

StandardizedScores(inputFeatures, xField, yField, targetField): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* xField: Expression 1:1 required

* yField: Expression 1:1 required

* targetField: String 0:1 optional

* result: SimpleFeatureCollection 1:1 required

StatisticsFeatures(inputFeatures, inputFields, caseField): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputFields: String 1:1 required

* caseField: String 0:1 optional

* result: DataStatisticsResult 1:1 required

StatisticsGridCoverage(inputCoverage, cropShape, bandIndex): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputCoverage: GridCoverage2D 1:1 required

* cropShape: Geometry 0:1 optional

* bandIndex: Integer 0:1 optional

* result: DataStatisticsResult 1:1 required

StyleCoverage(coverage, style): result
''''''''''''''''''''''''''''''''''''''

* coverage: GridCoverage2D 1:1 required

* style: Style 1:1 required

* result: GridCoverage2D 1:1 required

SumAreas(inputFeatures, filter, areaUnit): result
'''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* filter: Filter 0:1 optional

* areaUnit: AreaUnit 0:1 optional

* result: Double 1:1 required

SumLineLength(polygons, lengthField, countField, lines): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* polygons: SimpleFeatureCollection 1:1 required

* lengthField: String 1:1 required

* countField: String 0:1 optional

* lines: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

SymDifference(inputFeatures, differenceFeatures): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* differenceFeatures: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

TPS(inputFeatures, inputField, cellSize, extent): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* inputField: String 1:1 required

* cellSize: Double 0:1 optional

* extent: ReferencedEnvelope 0:1 optional

* result: GridCoverage2D 1:1 required

ThiessenPolygon(inputFeatures, attributes, clipArea): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* attributes: ThiessenAttributeMode 0:1 optional

* clipArea: Geometry 0:1 optional

* result: SimpleFeatureCollection 1:1 required

Transform(features, transform): result
''''''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* transform: String 1:1 required

* result: SimpleFeatureCollection 1:1 required

TransparencyFill(data): result
''''''''''''''''''''''''''''''

* data: GridCoverage2D 1:1 required

* result: GridCoverage2D 1:1 required

TriangularGrid(extent, boundsSource, size, orientation): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* extent: ReferencedEnvelope 1:1 required

* boundsSource: SimpleFeatureCollection 0:1 optional

* size: Double 1:1 required

* orientation: HexagonOrientation 0:1 optional

* result: SimpleFeatureCollection 1:1 required

TrimLine(lineFeatures, dangleLength, deleteShort): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* lineFeatures: SimpleFeatureCollection 1:1 required

* dangleLength: Double 1:1 required

* deleteShort: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

Union(inputFeatures, overlayFeatures): result
'''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* overlayFeatures: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

UnionFeatureCollection(first, second): result
'''''''''''''''''''''''''''''''''''''''''''''

* first: SimpleFeatureCollection 1:1 required

* second: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

UnionPolygon(polygonFeatures, preserveHole): result
'''''''''''''''''''''''''''''''''''''''''''''''''''

* polygonFeatures: SimpleFeatureCollection 1:1 required

* preserveHole: Boolean 0:1 optional

* result: SimpleFeatureCollection 1:1 required

Unique(features, attribute): result
'''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* attribute: String 1:1 required

* result: SimpleFeatureCollection 1:1 required

Update(inputFeatures, updateFeatures): result
'''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* updateFeatures: SimpleFeatureCollection 1:1 required

* result: SimpleFeatureCollection 1:1 required

VectorToRaster(features, rasterWidth, rasterHeight, title, attribute, bounds): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* features: SimpleFeatureCollection 1:1 required

* rasterWidth: Integer 1:1 required

* rasterHeight: Integer 1:1 required

* title: String 0:1 optional

* attribute: String 1:1 required

* bounds: Envelope 0:1 optional

* result: GridCoverage2D 1:1 required

VectorZonalStatistics(data, dataAttribute, zones): statistics
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* data: SimpleFeatureCollection 1:1 required

* dataAttribute: String 1:1 required

* zones: SimpleFeatureCollection 1:1 required

* statistics: SimpleFeatureCollection 1:1 required

VerticesToPoints(inputFeatures, location): result
'''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* location: PointLocationType 0:1 optional

* result: SimpleFeatureCollection 1:1 required

WedgeBuffer(pointFeatures, azimuth, wedgeAngle, innerRadius, outerRadius, radiusUnit): result
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* pointFeatures: SimpleFeatureCollection 1:1 required

* azimuth: Expression 1:1 required

* wedgeAngle: Expression 1:1 required

* innerRadius: Expression 0:1 optional

* outerRadius: Expression 1:1 required

* radiusUnit: DistanceUnit 0:1 optional

* result: SimpleFeatureCollection 1:1 required

WindRoseMap(inputFeatures, weightField, center): anchor
'''''''''''''''''''''''''''''''''''''''''''''''''''''''

* inputFeatures: SimpleFeatureCollection 1:1 required

* weightField: String 0:1 optional

* center: Geometry 0:1 optional

* anchor: SimpleFeatureCollection 1:1 required

ZonalStatistics(zoneFeatures, targetField, valueCoverage, bandIndex, statisticsType): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* zoneFeatures: SimpleFeatureCollection 1:1 required

* targetField: String 0:1 optional

* valueCoverage: GridCoverage2D 1:1 required

* bandIndex: Integer 0:1 optional

* statisticsType: ZonalStatisticsType 0:1 optional

* result: SimpleFeatureCollection 1:1 required

area(geom): result
''''''''''''''''''

* geom: Geometry 1:1 required

* result: double 1:1 required

boundary(geom): result
''''''''''''''''''''''

* geom: Geometry 1:1 required

* result: Geometry 1:1 required

buffer(geom, distance, quadrantSegments, capStyle): result
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

* geom: Geometry 1:1 required

* distance: Double 1:1 required

* quadrantSegments: Integer 0:1 optional

* capStyle: BufferCapStyle 0:1 optional

* result: Geometry 1:1 required

centroid(geom): result
''''''''''''''''''''''

* geom: Geometry 1:1 required

* result: Geometry 1:1 required

contains(a, b): result
''''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* result: boolean 1:1 required

convexHull(geom): result
''''''''''''''''''''''''

* geom: Geometry 1:1 required

* result: Geometry 1:1 required

crosses(a, b): result
'''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* result: boolean 1:1 required

densify(geom, distance): result
'''''''''''''''''''''''''''''''

* geom: Geometry 1:1 required

* distance: Double 1:1 required

* result: Geometry 1:1 required

difference(a, b): result
''''''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* result: Geometry 1:1 required

dimension(geom): result
'''''''''''''''''''''''

* geom: Geometry 1:1 required

* result: int 1:1 required

disjoint(a, b): result
''''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* result: boolean 1:1 required

distance(a, b): result
''''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* result: double 1:1 required

endPoint(geom): result
''''''''''''''''''''''

* geom: LineString 1:1 required

* result: Point 1:1 required

envelope(geom): result
''''''''''''''''''''''

* geom: Geometry 1:1 required

* result: Geometry 1:1 required

equalsExact(a, b): result
'''''''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* result: boolean 1:1 required

equalsExactTolerance(a, b, tolerance): result
'''''''''''''''''''''''''''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* tolerance: Double 1:1 required

* result: boolean 1:1 required

exteriorRing(geom): result
''''''''''''''''''''''''''

* geom: Polygon 1:1 required

* result: Geometry 1:1 required

geometryType(geom): result
''''''''''''''''''''''''''

* geom: Geometry 1:1 required

* result: String 1:1 required

getGeometryN(geom, index): result
'''''''''''''''''''''''''''''''''

* geom: GeometryCollection 1:1 required

* index: Integer 1:1 required

* result: Geometry 1:1 required

getX(geom): result
''''''''''''''''''

* geom: Point 1:1 required

* result: double 1:1 required

getY(geom): result
''''''''''''''''''

* geom: Point 1:1 required

* result: double 1:1 required

interiorPoint(geom): result
'''''''''''''''''''''''''''

* geom: Geometry 1:1 required

* result: Geometry 1:1 required

interiorRingN(geom, index): result
''''''''''''''''''''''''''''''''''

* geom: Polygon 1:1 required

* index: Integer 1:1 required

* result: Geometry 1:1 required

intersection(a, b): result
''''''''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* result: Geometry 1:1 required

intersects(a, b): result
''''''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* result: boolean 1:1 required

isClosed(geom): result
''''''''''''''''''''''

* geom: LineString 1:1 required

* result: boolean 1:1 required

isEmpty(geom): result
'''''''''''''''''''''

* geom: Geometry 1:1 required

* result: boolean 1:1 required

isRing(geom): result
''''''''''''''''''''

* geom: LineString 1:1 required

* result: boolean 1:1 required

isSimple(geom): result
''''''''''''''''''''''

* geom: Geometry 1:1 required

* result: boolean 1:1 required

isValid(geom): result
'''''''''''''''''''''

* geom: Geometry 1:1 required

* result: boolean 1:1 required

isWithinDistance(a, b, distance): result
''''''''''''''''''''''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* distance: Double 1:1 required

* result: boolean 1:1 required

length(geom): result
''''''''''''''''''''

* geom: Geometry 1:1 required

* result: double 1:1 required

numGeometries(geom): result
'''''''''''''''''''''''''''

* geom: Geometry 1:1 required

* result: int 1:1 required

numInteriorRing(geom): result
'''''''''''''''''''''''''''''

* geom: Polygon 1:1 required

* result: int 1:1 required

numPoints(geom): result
'''''''''''''''''''''''

* geom: Geometry 1:1 required

* result: int 1:1 required

octagonalEnvelope(geom): result
'''''''''''''''''''''''''''''''

* geom: Geometry 1:1 required

* result: Geometry 1:1 required

overlaps(a, b): result
''''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* result: boolean 1:1 required

parameter(argumentName, values): parameterMap
'''''''''''''''''''''''''''''''''''''''''''''

* argumentName: String 1:1 required

* values: Object 0:unbounded

* parameterMap: Map 1:1 required

pointN(geom, index): result
'''''''''''''''''''''''''''

* geom: LineString 1:1 required

* index: Integer 1:1 required

* result: Point 1:1 required

polygonize(geom): result
''''''''''''''''''''''''

* geom: Geometry 1:1 required

* result: Geometry 1:1 required

relate(a, b): result
''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* result: String 1:1 required

relatePattern(a, b, Relate pattern): result
'''''''''''''''''''''''''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* Relate pattern: String 1:1 required

* result: boolean 1:1 required

reproject(geometry, sourceCRS, targetCRS): result
'''''''''''''''''''''''''''''''''''''''''''''''''

* geometry: Geometry 1:1 required

* sourceCRS: CoordinateReferenceSystem 0:1 optional

* targetCRS: CoordinateReferenceSystem 0:1 optional

* result: Geometry 1:1 required

simplify(geom, distance): result
''''''''''''''''''''''''''''''''

* geom: Geometry 1:1 required

* distance: Double 1:1 required

* result: Geometry 1:1 required

splitPolygon(polygon, line): result
'''''''''''''''''''''''''''''''''''

* polygon: Geometry 1:1 required

* line: LineString 1:1 required

* result: Geometry 1:1 required

startPoint(geom): result
''''''''''''''''''''''''

* geom: LineString 1:1 required

* result: Point 1:1 required

symDifference(a, b): result
'''''''''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* result: Geometry 1:1 required

touches(a, b): result
'''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* result: boolean 1:1 required

union(geom): result
'''''''''''''''''''

* geom: Geometry 2:unbounded required

* result: Geometry 1:1 required

within(a, b): result
''''''''''''''''''''

* a: Geometry 1:1 required

* b: Geometry 1:1 required

* result: boolean 1:1 required

PolygonLabelFunctionFactory
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Contains 1 functions.

labelPoint(polygon, tolerance): labelPoint
''''''''''''''''''''''''''''''''''''''''''

* polygon: Geometry 1:1 required

* tolerance: double 1:1 required

* labelPoint: Point 1:1 required

GeoServerFunctionFactory
^^^^^^^^^^^^^^^^^^^^^^^^

Contains 1 functions.

isInstanceOf(class): isInstanceOf
'''''''''''''''''''''''''''''''''

* class: Class 1:1 required

* isInstanceOf: Boolean 1:1 required

